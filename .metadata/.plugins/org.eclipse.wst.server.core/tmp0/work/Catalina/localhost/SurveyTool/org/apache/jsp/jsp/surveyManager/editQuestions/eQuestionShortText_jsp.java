/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.27
 * Generated at: 2016-10-06 11:33:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.surveyManager.editQuestions;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import ilu.surveytool.databasemanager.DataObject.Resource;
import java.util.List;
import ilu.surveytool.constants.Attribute;
import ilu.surveytool.databasemanager.DataObject.Question;
import ilu.surveytool.databasemanager.constants.DBConstants;
import ilu.surveytool.language.Language;

public final class eQuestionShortText_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("ilu.surveytool.language.Language");
    _jspx_imports_classes.add("ilu.surveytool.databasemanager.constants.DBConstants");
    _jspx_imports_classes.add("ilu.surveytool.databasemanager.DataObject.Resource");
    _jspx_imports_classes.add("ilu.surveytool.constants.Attribute");
    _jspx_imports_classes.add("ilu.surveytool.databasemanager.DataObject.Question");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

Question question = (Question) request.getAttribute(Attribute.s_QUESTION);
//String title = question.getContents().get(DBConstants.s_VALUE_CONTENTTYPE_NAME_TITLE).getText();
			
Language lang = new Language(getServletContext().getRealPath("/")); 
lang.loadLanguage(Language.getLanguageRequest(request));

      out.write("\r\n");
      out.write("<li class=\"panel-question\" id=\"panel-question1\" qid=\"");
      out.print( question.getQuestionId() );
      out.write("\" index=\"");
      out.print( question.getIndex() );
      out.write("\">\r\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "eqComponents/eqHead.jsp", out, false);
      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"panel-body question-options\">\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<div class=\"col-md-1\">\r\n");
      out.write("\t\t\t\t<label class=\"type-tittle\" for=\"type-question-");
      out.print( question.getIndex() );
      out.write('"');
      out.write('>');
      out.print(lang.getContent("question.edit.type"));
      out.write("</label>\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t<div class=\"col-md-4\">\t\r\n");
      out.write("\t\t\t\t<p class=\"question-type-aux\">");
      out.print(lang.getContent("question.new.formfield"));
      out.write("</p>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!--<div class=\"col-md-4\">\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t<select class=\"form-control\" id=\"type-question-");
      out.print( question.getIndex() );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t<option value=\"f\" selected>");
      out.print(lang.getContent("question.new.formfield"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t     <option value=\"p\">");
      out.print(lang.getContent("question.new.paragraph"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"m\">");
      out.print(lang.getContent("question.new.multiple"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"s\">");
      out.print(lang.getContent("question.new.simple"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"o\">");
      out.print(lang.getContent("question.new.ordering"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"g\">");
      out.print(lang.getContent("question.new.grading"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"ma\">");
      out.print(lang.getContent("question.new.matrix"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"sc\">");
      out.print(lang.getContent("question.new.scale"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t    <option value=\"c\">");
      out.print(lang.getContent("question.new.code"));
      out.write("</option> \r\n");
      out.write("\t\t\t\t</select>\r\n");
      out.write("\t\t\t</div>-->\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t<div class=\"right col-md-7\">\r\n");
      out.write("\t\t\t\t");
 if((boolean)request.getAttribute(Attribute.s_ADD_QUESTIONS)){ 
      out.write("\r\n");
      out.write("\t\t\t\t<label for=\"mandatoryButton\" class=\"visuallyhidden\">");
      out.print( lang.getContent("accesibility.question.mandatory") );
      out.write("</label>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t<button class=\"btn btn-question-head btn-sm active mandatory-button\" id=\"mandatoryButton\" active=\"");
      out.print( question.isMandatory() );
      out.write("\"><i class=\"fa fa-asterisk red\"></i><span>");
      out.print( lang.getContent("question.mandatory") );
      out.write("</span></button>\r\n");
      out.write("\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<div class=\"panel-body\">\t\r\n");
      out.write("\t\t<div class=\"question-frame\">\r\n");
      out.write("\t\t\t<h6>");
      out.print(lang.getContent("question.edit.statementSetting.title"));
      out.write("</h6>\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "eqComponents/eqDescription.jsp", out, false);
      out.write("\t\r\n");
      out.write("\t\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "eqComponents/eqFiles.jsp", out, false);
      out.write("\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t");
 if((boolean)request.getAttribute(Attribute.s_ADD_QUESTIONS)){ 
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t<div class=\"question-frame\">\r\n");
      out.write("\t\t\t<h6>");
      out.print(lang.getContent("question.edit.response_settings.title"));
      out.write("</h6>\r\n");
      out.write("\t\t\t");

			String textLength = question.getParameterValue(DBConstants.s_VALUE_QUESTIONPARAMETER_TEXTLENGTH);
			String decimals = question.getParameterValue(DBConstants.s_VALUE_QUESTIONPARAMETER_DECIMALS);
			String inputMode = question.getParameterValue(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_INPUT_MODE);
			String inputType = question.getParameterValue(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE);
			String minValue = question.getParameterValue(DBConstants.s_VALUE_QUESTIONPARAMETER_MINVALUE);
			String maxValue = question.getParameterValue(DBConstants.s_VALUE_QUESTIONPARAMETER_MAXVALUE);							  							
			
      out.write("\r\n");
      out.write("\t\t\t<div class=\"row\" style=\"vertical-align:middle\">\r\n");
      out.write("\t\t\t\t<div class=\"col-md-3\" id=\"inputMode\">\r\n");
      out.write("\t\t\t\t\t<label for=\"input-mode\">");
      out.print(lang.getContent("question.form.options.text.inputTextBoxInput") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t<select class=\"form-control\" id=\"input-mode\">\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_INPUT_MODE_FREE);
      out.write('"');
      out.write(' ');
if(inputMode.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_INPUT_MODE_FREE)){
      out.write(" selected ");
}
      out.write('>');
      out.print(lang.getContent("question.form.options.text.inputTextBoxInput.free"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<!-- <option value=\"");
      out.print(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_INPUT_MODE_PULLDOWN);
      out.write('"');
      out.write(' ');
if(inputMode.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_INPUT_MODE_PULLDOWN)){
      out.write(" selected ");
}
      out.write('>');
      out.print(lang.getContent("question.form.options.text.inputTextBoxInput.pulldown"));
      out.write("</option>-->\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"col-md-3\" id=\"inputType\">\r\n");
      out.write("\t\t\t\t\t<label for=\"input-type\">");
      out.print(lang.getContent("question.form.options.text.inputTextBoxType") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t<select class=\"form-control\" id=\"input-type\">\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_GENERAL);
      out.write('"');
      out.write(' ');
if(inputType.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_GENERAL)){
      out.write(" selected ");
}
      out.write('>');
      out.print(lang.getContent("question.form.options.text.inputTextBoxType.general"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_TEXT);
      out.write('"');
      out.write(' ');
if(inputType.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_TEXT)){
      out.write(" selected ");
}
      out.write('>');
      out.print(lang.getContent("question.form.options.text.inputTextBoxType.text"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t<option value=\"");
      out.print(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_NUMBER);
      out.write('"');
      out.write(' ');
if(inputType.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_NUMBER)){
      out.write(" selected ");
}
      out.write('>');
      out.print(lang.getContent("question.form.options.text.inputTextBoxType.numerical"));
      out.write("</option>\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t</select>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t<div class=\"respsettingsCheckbox col-md-6\" id=\"inputOptions\" ><!-- ");
//if(!inputMode.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_INPUT_MODE_FREE)){
      out.write("style=\"display:none\"");
//}
      out.write(">-->\r\n");
      out.write("\t\t\t\t\t<div id=\"genericOptions\" ");
if(inputType.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_NUMBER)){
      out.write("class=\"question-response-settings hidden\"");
}else{
      out.write("class=\"question-response-settings\"");
} 
      out.write(">\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<input class= \"question-response-settings-options\" type=\"checkbox\" name=\"isLimitedChars-");
      out.print( question.getIndex() );
      out.write("\" id=\"isLimitedChars\" ");
if(!textLength.equals("")){
      out.write(" checked ");
}
      out.write(">\r\n");
      out.write("\t\t\t\t\t\t<label class= \"question-response-settings-options\" for=\"isLimitedChars\">");
      out.print(lang.getContent("question.form.options.text.chars") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t<div id=\"charsId\" ");
 if(textLength.equals("")){ 
      out.write(" class=\"question-response-settings-sub-none\" ");
} else{
      out.write("class=\"question-response-settings-sub-inherit\"");
} 
      out.write(">\r\n");
      out.write("\t\t\t\t  \t\t\t<input type=\"number\" min=\"0\" max=\"9999\" onkeydown=\"limit(this)\" onkeyup=\"limit(this)\" id=\"survey-question-max-chars\" value=\"");
      out.print( textLength );
      out.write("\"></input>\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"survey-question-max-chars\">");
      out.print(lang.getContent("question.form.options.text.charshelp") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<div id=\"decimalsOptions\" ");
if(!inputType.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_NUMBER)){
      out.write("class=\"question-response-settings hidden\"");
}else{
      out.write("class=\"question-response-settings\"");
} 
      out.write(">\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t<input class= \"question-response-settings-options\" type=\"checkbox\" name=\"allowDecimals-");
      out.print( question.getIndex() );
      out.write("\" id=\"allowDecimals\" ");
if(!decimals.equals("")){
      out.write(" checked ");
}
      out.write(">\r\n");
      out.write("\t\t\t\t\t  \t<label class= \"question-response-settings-options\" for=\"allowDecimals\">");
      out.print(lang.getContent("question.form.options.text.decimalValue") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t<div  id=\"decimalsDiv\" ");
 if(decimals.equals("")){
      out.write(" class=\"question-response-settings-sub-none\" ");
} else{
      out.write(" class=\"question-response-settings-sub-inherit\"");
} 
      out.write(">\r\n");
      out.write("\t\t\t\t  \t\t\t<input type=\"number\" min=\"0\" max=\"9999\" onkeydown=\"limit(this)\" onkeyup=\"limit(this)\" id=\"survey-question-decimals\" value=\"");
      out.print( decimals );
      out.write("\"></input>\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"survey-question-decimals\">");
      out.print(lang.getContent("question.form.options.text.decimalNumbers") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t<div id=\"rangeOptions\"  ");
if(!inputType.equals(DBConstants.s_VALUE_QUESTIONPARAMETER_FORMFIELD_TYPE_NUMBER)){
      out.write("class=\"question-response-settings hidden\"");
}else{
      out.write("class=\"question-response-settings\"");
}
      out.write(">\t\r\n");
      out.write("\t\t\t\t\t \t<input class= \"question-response-settings-options\" type=\"checkbox\" name=\"range-");
      out.print( question.getIndex() );
      out.write("\" id=\"range\" ");
if(!minValue.equals("") || !maxValue.equals("")){
      out.write(" checked ");
}
      out.write(">\r\n");
      out.write("\t\t\t\t\t  \t<label class= \"question-response-settings-options\" for=\"range\">");
      out.print(lang.getContent("question.form.options.text.range") );
      out.write("</label>\r\n");
      out.write("\t\t\t\t\t\t<div id=\"rangeId\" ");
 if(minValue.equals("") && maxValue.equals("")){ 
      out.write(" class=\"question-response-settings-sub-none\" ");
} else{
      out.write("class=\"question-response-settings-sub-inherit\"");
} 
      out.write(">\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"survey-minValue\">");
      out.print( lang.getContent("question.form.options.text.minNumericalValue") );
      out.write("</label>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"9999\" onkeydown=\"limit(this)\" onkeyup=\"limit(this)\" id=\"survey-minValue\" value=\"");
      out.print(minValue);
      out.write("\"></input>\r\n");
      out.write("\t\t\t\t\t\t\t<label for=\"survey-maxValue\">");
      out.print( lang.getContent("question.form.options.text.maxNumericalValue") );
      out.write("</label>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t<input type=\"number\" min=\"0\" max=\"9999\" onkeydown=\"limit(this)\" onkeyup=\"limit(this)\" id=\"survey-maxValue\" value=\"");
      out.print(maxValue);
      out.write("\"></input>\r\n");
      out.write("\t\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t</div>\t\r\n");
      out.write("\t\t</div>\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t");
 if((boolean)request.getAttribute(Attribute.s_ADD_QUESTIONS)){ 
      out.write("\t\t\t\t  \t\t\t\t\t\t\t\r\n");
      out.write("\t\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "eqComponents/eqDependences.jsp" + "?" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("withLogic", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("false", request.getCharacterEncoding()), out, false);
      out.write("\r\n");
      out.write("\t\t");
} 
      out.write("\r\n");
      out.write("\t\t");
 } 
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t</div>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("</li>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
